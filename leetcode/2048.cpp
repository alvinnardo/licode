#include "../template/head.h"
#include <bits/stdc++.h>
int nextBeautifulNumber(int n) {
    // 思路：打表 + 二分
    // 时间 O(logk)，空间 O(k)

    // 满足的数只有 115 个，二分找答案即可
    vector<int> vec{
        0,       1,       22,     122,    212,    221,    333,     1333,
        3133,    3313,    3331,   4444,   14444,  22333,  23233,   23323,
        23332,   32233,   32323,  32332,  33223,  33232,  33322,   41444,
        44144,   44414,   44441,  55555,  122333, 123233, 123323,  123332,
        132233,  132323,  132332, 133223, 133232, 133322, 155555,  212333,
        213233,  213323,  213332, 221333, 223133, 223313, 223331,  224444,
        231233,  231323,  231332, 232133, 232313, 232331, 233123,  233132,
        233213,  233231,  233312, 233321, 242444, 244244, 244424,  244442,
        312233,  312323,  312332, 313223, 313232, 313322, 321233,  321323,
        321332,  322133,  322313, 322331, 323123, 323132, 323213,  323231,
        323312,  323321,  331223, 331232, 331322, 332123, 332132,  332213,
        332231,  332312,  332321, 333122, 333212, 333221, 422444,  424244,
        424424,  424442,  442244, 442424, 442442, 444224, 444242,  444422,
        515555,  551555,  555155, 555515, 555551, 666666, 1224444, 1242444,
        1244244, 1244424, 1244442};

    return *std::ranges::upper_bound(vec.begin(), vec.end(), n);
}

int nextBeautifulNumber1(int n) {
    // 思路：枚举
    // 时间 O(kn)，空间 O(1)

    vector<int> vec(10);
    int t = n + 1, p{};
    while (true) {

        p = t;
        while (p) {
            vec[p % 10]++;
            p /= 10;
        }

        bool check = true;
        for (int i = 0; i < vec.size(); i++) {
            if (!vec[i]) {
                continue;
            }

            if (vec[i] != i) {
                check = false;
                break;
            }
        }

        if (check) {
            return t;
        } else {
            for (int i = 0; i < vec.size(); i++) {
                vec[i] = 0;
            }
        }

        t++;
    }

    return -1;
}

int main(int argc, char *argv[]) {
    // 22
    cout << nextBeautifulNumber(1) << endl;
    // 1333
    cout << nextBeautifulNumber(1000) << endl;
    // 3133
    cout << nextBeautifulNumber(3000) << endl;

    return 0;
}
